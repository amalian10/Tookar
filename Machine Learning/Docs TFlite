{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#Import Dataset\n","from google.colab import  files\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":71},"id":"yh7Fiycn-wqc","outputId":"b1b20162-b52f-429d-d057-fd0c4760d022"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a8d7ba2e-456e-4252-a444-6621a456189a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a8d7ba2e-456e-4252-a444-6621a456189a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Cust ID Copy of Copy of Copy of Survey Form Project (Responses) - Form Responses 1.csv to Cust ID Copy of Copy of Copy of Survey Form Project (Responses) - Form Responses 1.csv\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gxlKzBQJ-ruS","outputId":"2903208f-fbc2-4d83-8411-7043f4c9ded8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Sample Customer ID: 108\n","Nearest Customer IDs (Predicted): [104 109 106 107 105 103 110  35  17   7]\n","Nearest Customer IDs (Ground Truth): [104 109 106 107 105 103 110  35  17   7]\n","Accuracy: 1.0\n"]}],"source":["import tensorflow as tf\n","import numpy as np\n","import pandas as pd\n","\n","# Step 1: Read the CSV file\n","data = pd.read_csv('Cust ID Copy of Copy of Copy of Survey Form Project (Responses) - Form Responses 1.csv')\n","\n","# Step 2: Extract customer ID, latitude, and longitude columns\n","customer_ids = data['Customer_ID'].values\n","latitude = data['Latitude'].values\n","longitude = data['Longitude'].values\n","\n","# Step 3: Combine latitude and longitude into a single dataset\n","dataset = np.column_stack((latitude, longitude))\n","\n","# Step 4: Create a NearestNeighbors model\n","k = 10  # Number of nearest neighbors to find\n","\n","# Convert dataset to TensorFlow constant\n","dataset_tensor = tf.constant(dataset, dtype=tf.float32)\n","\n","# Calculate distances using TensorFlow\n","distances = tf.norm(tf.expand_dims(dataset_tensor, 0) - tf.expand_dims(dataset_tensor, 1), axis=-1)\n","\n","# Set diagonal distances to a high value to exclude self-distance\n","diagonal_mask = tf.eye(dataset.shape[0], dtype=tf.bool)\n","distances = tf.where(diagonal_mask, tf.fill(distances.shape, float('inf')), distances)\n","\n","# Find the indices of the nearest neighbors\n","nearest_indices = tf.argsort(distances, axis=1)[:, :k]\n","\n","# Convert indices to nearest customer IDs\n","nearest_customer_ids = tf.gather(customer_ids, nearest_indices)\n","\n","# Step 5: Create a TensorFlow SavedModel\n","class NearestCustomerModel(tf.Module):\n","    def __init__(self):\n","        super(NearestCustomerModel, self).__init__()\n","\n","    @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.int64)])\n","    def get_nearest_customers(self, customer_id):\n","        customer_index = tf.where(tf.equal(customer_ids, customer_id))\n","        nearest_customer_ids_for_customer = tf.squeeze(tf.gather(nearest_customer_ids, customer_index))\n","        return nearest_customer_ids_for_customer\n","\n","model = NearestCustomerModel()\n","tf.saved_model.save(model, 'nearest_customer_model')\n","\n","# Step 6: Calculate accuracy\n","# Randomly select a customer from the dataset for evaluation\n","sample_index = np.random.randint(0, len(customer_ids))\n","sample_customer_id = customer_ids[sample_index]\n","\n","# Get the nearest customers using the saved model\n","loaded_model = tf.saved_model.load('nearest_customer_model')\n","nearest_customers = loaded_model.get_nearest_customers(sample_customer_id)\n","\n","# Get the ground truth nearest neighbors for the sample customer ID\n","ground_truth_nearest_neighbors = nearest_customer_ids[sample_index]\n","\n","# Calculate accuracy\n","accuracy = len(set(nearest_customers.numpy()).intersection(set(ground_truth_nearest_neighbors.numpy()))) / k\n","\n","# Print the result\n","print(f\"Sample Customer ID: {sample_customer_id}\")\n","print(f\"Nearest Customer IDs (Predicted): {nearest_customers.numpy()}\")\n","print(f\"Nearest Customer IDs (Ground Truth): {ground_truth_nearest_neighbors.numpy()}\")\n","print(f\"Accuracy: {accuracy}\")\n"]},{"cell_type":"code","source":["# Step 7: Convert the model to TFLite format\n","converter = tf.lite.TFLiteConverter.from_saved_model('nearest_customer_model')\n","tflite_model = converter.convert()\n","\n","# Step 8: Save the TFLite model to a file\n","with open('nearest_customer_model.tflite', 'wb') as f:\n","    f.write(tflite_model)\n"],"metadata":{"id":"qZcEubmj-110"},"execution_count":null,"outputs":[]}]}
